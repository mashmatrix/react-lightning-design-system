"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toast = exports.Alert = exports.Notification = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = require("./Button");

var _Icon = require("./Icon");

var NOTIFICATION_TYPES = ['alert', 'toast'];
var NOTIFICATION_LEVELS = ['info', 'success', 'warning', 'error'];

var Notification = function Notification(props) {
  var className = props.className,
      type = props.type,
      level = props.level,
      alt = props.alt,
      _props$alertTexture = props.alertTexture,
      alertTexture = _props$alertTexture === void 0 ? true : _props$alertTexture,
      icon = props.icon,
      _props$iconSize = props.iconSize,
      iconSize = _props$iconSize === void 0 ? 'small' : _props$iconSize,
      onClose = props.onClose,
      children = props.children,
      pprops = (0, _objectWithoutProperties2.default)(props, ["className", "type", "level", "alt", "alertTexture", "icon", "iconSize", "onClose", "children"]);
  var typeClassName = type && NOTIFICATION_TYPES.indexOf(type) >= 0 ? "slds-notify--".concat(type) : null;
  var levelClassName = level && NOTIFICATION_LEVELS.indexOf(level) >= 0 ? "slds-theme--".concat(level) : null;
  var alertClassNames = (0, _classnames.default)(className, 'slds-notify', typeClassName, levelClassName, alertTexture ? 'slds-theme--alert-texture' : null);
  var iconEl = icon ? _react.default.createElement(_Icon.Icon, {
    className: type === 'toast' ? 'slds-m-right--small' : 'slds-m-right--x-small',
    icon: icon,
    size: iconSize,
    fillColor: "none",
    textColor: level === 'warning' ? 'default' : null
  }) : undefined;
  return _react.default.createElement("div", (0, _extends2.default)({
    className: alertClassNames,
    role: "alert"
  }, pprops), alt ? _react.default.createElement("span", {
    className: "slds-assistive-text"
  }, alt) : undefined, onClose ? _react.default.createElement(_Button.Button, {
    className: "slds-notify__close",
    type: "icon-inverse",
    icon: "close",
    iconSize: type === 'toast' ? 'large' : 'small',
    alt: "Close",
    onClick: onClose
  }) : undefined, type === 'toast' ? _react.default.createElement("div", {
    className: "slds-notify__content slds-grid"
  }, iconEl, _react.default.createElement("div", {
    className: "slds-col slds-align-middle"
  }, _react.default.createElement("h2", {
    className: "slds-text-heading--small"
  }, children))) : _react.default.createElement("h2", null, iconEl, children));
};

exports.Notification = Notification;

var Alert = function Alert(props) {
  return _react.default.createElement(Notification, (0, _extends2.default)({}, props, {
    type: "alert"
  }));
};

exports.Alert = Alert;

var Toast = function Toast(props) {
  return _react.default.createElement(Notification, (0, _extends2.default)({}, props, {
    type: "toast"
  }));
};

exports.Toast = Toast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL05vdGlmaWNhdGlvbi50c3giXSwibmFtZXMiOlsiTk9USUZJQ0FUSU9OX1RZUEVTIiwiTk9USUZJQ0FUSU9OX0xFVkVMUyIsIk5vdGlmaWNhdGlvbiIsInByb3BzIiwiY2xhc3NOYW1lIiwidHlwZSIsImxldmVsIiwiYWx0IiwiYWxlcnRUZXh0dXJlIiwiaWNvbiIsImljb25TaXplIiwib25DbG9zZSIsImNoaWxkcmVuIiwicHByb3BzIiwidHlwZUNsYXNzTmFtZSIsImluZGV4T2YiLCJsZXZlbENsYXNzTmFtZSIsImFsZXJ0Q2xhc3NOYW1lcyIsImljb25FbCIsInVuZGVmaW5lZCIsIkFsZXJ0IiwiVG9hc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxrQkFBa0IsR0FBRyxDQUFDLE9BQUQsRUFBVSxPQUFWLENBQTNCO0FBRUEsSUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixTQUFwQixFQUErQixPQUEvQixDQUE1Qjs7QUFnQk8sSUFBTUMsWUFBeUMsR0FBRyxTQUE1Q0EsWUFBNEMsQ0FBQ0MsS0FBRCxFQUFXO0FBQUEsTUFFaEVDLFNBRmdFLEdBWTlERCxLQVo4RCxDQUVoRUMsU0FGZ0U7QUFBQSxNQUdoRUMsSUFIZ0UsR0FZOURGLEtBWjhELENBR2hFRSxJQUhnRTtBQUFBLE1BSWhFQyxLQUpnRSxHQVk5REgsS0FaOEQsQ0FJaEVHLEtBSmdFO0FBQUEsTUFLaEVDLEdBTGdFLEdBWTlESixLQVo4RCxDQUtoRUksR0FMZ0U7QUFBQSw0QkFZOURKLEtBWjhELENBTWhFSyxZQU5nRTtBQUFBLE1BTWhFQSxZQU5nRSxvQ0FNakQsSUFOaUQ7QUFBQSxNQU9oRUMsSUFQZ0UsR0FZOUROLEtBWjhELENBT2hFTSxJQVBnRTtBQUFBLHdCQVk5RE4sS0FaOEQsQ0FRaEVPLFFBUmdFO0FBQUEsTUFRaEVBLFFBUmdFLGdDQVFyRCxPQVJxRDtBQUFBLE1BU2hFQyxPQVRnRSxHQVk5RFIsS0FaOEQsQ0FTaEVRLE9BVGdFO0FBQUEsTUFVaEVDLFFBVmdFLEdBWTlEVCxLQVo4RCxDQVVoRVMsUUFWZ0U7QUFBQSxNQVc3REMsTUFYNkQsMENBWTlEVixLQVo4RDtBQWFsRSxNQUFNVyxhQUFhLEdBQ2pCVCxJQUFJLElBQUlMLGtCQUFrQixDQUFDZSxPQUFuQixDQUEyQlYsSUFBM0IsS0FBb0MsQ0FBNUMsMEJBQ29CQSxJQURwQixJQUVJLElBSE47QUFJQSxNQUFNVyxjQUFjLEdBQ2xCVixLQUFLLElBQUlMLG1CQUFtQixDQUFDYyxPQUFwQixDQUE0QlQsS0FBNUIsS0FBc0MsQ0FBL0MseUJBQ21CQSxLQURuQixJQUVJLElBSE47QUFJQSxNQUFNVyxlQUFlLEdBQUcseUJBQ3RCYixTQURzQixFQUV0QixhQUZzQixFQUd0QlUsYUFIc0IsRUFJdEJFLGNBSnNCLEVBS3RCUixZQUFZLEdBQUcsMkJBQUgsR0FBaUMsSUFMdkIsQ0FBeEI7QUFRQSxNQUFNVSxNQUFNLEdBQUdULElBQUksR0FDakIsNkJBQUMsVUFBRDtBQUNFLElBQUEsU0FBUyxFQUNQSixJQUFJLEtBQUssT0FBVCxHQUFtQixxQkFBbkIsR0FBMkMsdUJBRi9DO0FBSUUsSUFBQSxJQUFJLEVBQUVJLElBSlI7QUFLRSxJQUFBLElBQUksRUFBRUMsUUFMUjtBQU1FLElBQUEsU0FBUyxFQUFDLE1BTlo7QUFPRSxJQUFBLFNBQVMsRUFBRUosS0FBSyxLQUFLLFNBQVYsR0FBc0IsU0FBdEIsR0FBa0M7QUFQL0MsSUFEaUIsR0FXakJhLFNBWEY7QUFjQSxTQUNFO0FBQUssSUFBQSxTQUFTLEVBQUVGLGVBQWhCO0FBQWlDLElBQUEsSUFBSSxFQUFDO0FBQXRDLEtBQWtESixNQUFsRCxHQUNHTixHQUFHLEdBQUc7QUFBTSxJQUFBLFNBQVMsRUFBQztBQUFoQixLQUF1Q0EsR0FBdkMsQ0FBSCxHQUF3RFksU0FEOUQsRUFFR1IsT0FBTyxHQUNOLDZCQUFDLGNBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBQyxvQkFEWjtBQUVFLElBQUEsSUFBSSxFQUFDLGNBRlA7QUFHRSxJQUFBLElBQUksRUFBQyxPQUhQO0FBSUUsSUFBQSxRQUFRLEVBQUVOLElBQUksS0FBSyxPQUFULEdBQW1CLE9BQW5CLEdBQTZCLE9BSnpDO0FBS0UsSUFBQSxHQUFHLEVBQUMsT0FMTjtBQU1FLElBQUEsT0FBTyxFQUFFTTtBQU5YLElBRE0sR0FVTlEsU0FaSixFQWNHZCxJQUFJLEtBQUssT0FBVCxHQUNDO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNHYSxNQURILEVBRUU7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQ0U7QUFBSSxJQUFBLFNBQVMsRUFBQztBQUFkLEtBQTBDTixRQUExQyxDQURGLENBRkYsQ0FERCxHQVFDLHlDQUNHTSxNQURILEVBRUdOLFFBRkgsQ0F0QkosQ0FERjtBQThCRCxDQXpFTTs7OztBQThFQSxJQUFNUSxLQUEyQixHQUFHLFNBQTlCQSxLQUE4QixDQUFDakIsS0FBRDtBQUFBLFNBQ3pDLDZCQUFDLFlBQUQsNkJBQWtCQSxLQUFsQjtBQUF5QixJQUFBLElBQUksRUFBQztBQUE5QixLQUR5QztBQUFBLENBQXBDOzs7O0FBS0EsSUFBTWtCLEtBQTJCLEdBQUcsU0FBOUJBLEtBQThCLENBQUNsQixLQUFEO0FBQUEsU0FDekMsNkJBQUMsWUFBRCw2QkFBa0JBLEtBQWxCO0FBQXlCLElBQUEsSUFBSSxFQUFDO0FBQTlCLEtBRHlDO0FBQUEsQ0FBcEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuL0J1dHRvbic7XG5pbXBvcnQgeyBJY29uLCBJY29uU2l6ZSB9IGZyb20gJy4vSWNvbic7XG5cbmNvbnN0IE5PVElGSUNBVElPTl9UWVBFUyA9IFsnYWxlcnQnLCAndG9hc3QnXSBhcyBjb25zdDtcblxuY29uc3QgTk9USUZJQ0FUSU9OX0xFVkVMUyA9IFsnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InXSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uVHlwZSA9IHR5cGVvZiBOT1RJRklDQVRJT05fVFlQRVNbbnVtYmVyXTtcbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvbkxldmVsID0gdHlwZW9mIE5PVElGSUNBVElPTl9MRVZFTFNbbnVtYmVyXTtcblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uUHJvcHMgPSB7XG4gIHR5cGU/OiBOb3RpZmljYXRpb25UeXBlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGxldmVsPzogTm90aWZpY2F0aW9uTGV2ZWw7XG4gIGFsdD86IHN0cmluZztcbiAgaWNvbj86IHN0cmluZztcbiAgaWNvblNpemU/OiBJY29uU2l6ZTtcbiAgYWxlcnRUZXh0dXJlPzogYm9vbGVhbjtcbiAgb25DbG9zZT86IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbn0gJiBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD47XG5cbmV4cG9ydCBjb25zdCBOb3RpZmljYXRpb246IFJlYWN0LkZDPE5vdGlmaWNhdGlvblByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIHR5cGUsXG4gICAgbGV2ZWwsXG4gICAgYWx0LFxuICAgIGFsZXJ0VGV4dHVyZSA9IHRydWUsXG4gICAgaWNvbixcbiAgICBpY29uU2l6ZSA9ICdzbWFsbCcsXG4gICAgb25DbG9zZSxcbiAgICBjaGlsZHJlbixcbiAgICAuLi5wcHJvcHNcbiAgfSA9IHByb3BzO1xuICBjb25zdCB0eXBlQ2xhc3NOYW1lID1cbiAgICB0eXBlICYmIE5PVElGSUNBVElPTl9UWVBFUy5pbmRleE9mKHR5cGUpID49IDBcbiAgICAgID8gYHNsZHMtbm90aWZ5LS0ke3R5cGV9YFxuICAgICAgOiBudWxsO1xuICBjb25zdCBsZXZlbENsYXNzTmFtZSA9XG4gICAgbGV2ZWwgJiYgTk9USUZJQ0FUSU9OX0xFVkVMUy5pbmRleE9mKGxldmVsKSA+PSAwXG4gICAgICA/IGBzbGRzLXRoZW1lLS0ke2xldmVsfWBcbiAgICAgIDogbnVsbDtcbiAgY29uc3QgYWxlcnRDbGFzc05hbWVzID0gY2xhc3NuYW1lcyhcbiAgICBjbGFzc05hbWUsXG4gICAgJ3NsZHMtbm90aWZ5JyxcbiAgICB0eXBlQ2xhc3NOYW1lLFxuICAgIGxldmVsQ2xhc3NOYW1lLFxuICAgIGFsZXJ0VGV4dHVyZSA/ICdzbGRzLXRoZW1lLS1hbGVydC10ZXh0dXJlJyA6IG51bGxcbiAgKTtcblxuICBjb25zdCBpY29uRWwgPSBpY29uID8gKFxuICAgIDxJY29uXG4gICAgICBjbGFzc05hbWU9e1xuICAgICAgICB0eXBlID09PSAndG9hc3QnID8gJ3NsZHMtbS1yaWdodC0tc21hbGwnIDogJ3NsZHMtbS1yaWdodC0teC1zbWFsbCdcbiAgICAgIH1cbiAgICAgIGljb249e2ljb259XG4gICAgICBzaXplPXtpY29uU2l6ZX1cbiAgICAgIGZpbGxDb2xvcj0nbm9uZSdcbiAgICAgIHRleHRDb2xvcj17bGV2ZWwgPT09ICd3YXJuaW5nJyA/ICdkZWZhdWx0JyA6IG51bGx9XG4gICAgLz5cbiAgKSA6IChcbiAgICB1bmRlZmluZWRcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXthbGVydENsYXNzTmFtZXN9IHJvbGU9J2FsZXJ0JyB7Li4ucHByb3BzfT5cbiAgICAgIHthbHQgPyA8c3BhbiBjbGFzc05hbWU9J3NsZHMtYXNzaXN0aXZlLXRleHQnPnthbHR9PC9zcGFuPiA6IHVuZGVmaW5lZH1cbiAgICAgIHtvbkNsb3NlID8gKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPSdzbGRzLW5vdGlmeV9fY2xvc2UnXG4gICAgICAgICAgdHlwZT0naWNvbi1pbnZlcnNlJ1xuICAgICAgICAgIGljb249J2Nsb3NlJ1xuICAgICAgICAgIGljb25TaXplPXt0eXBlID09PSAndG9hc3QnID8gJ2xhcmdlJyA6ICdzbWFsbCd9XG4gICAgICAgICAgYWx0PSdDbG9zZSdcbiAgICAgICAgICBvbkNsaWNrPXtvbkNsb3NlfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgdW5kZWZpbmVkXG4gICAgICApfVxuICAgICAge3R5cGUgPT09ICd0b2FzdCcgPyAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzbGRzLW5vdGlmeV9fY29udGVudCBzbGRzLWdyaWQnPlxuICAgICAgICAgIHtpY29uRWx9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3NsZHMtY29sIHNsZHMtYWxpZ24tbWlkZGxlJz5cbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9J3NsZHMtdGV4dC1oZWFkaW5nLS1zbWFsbCc+e2NoaWxkcmVufTwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgPGgyPlxuICAgICAgICAgIHtpY29uRWx9XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2gyPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xuXG5leHBvcnQgdHlwZSBBbGVydFByb3BzID0gT21pdDxOb3RpZmljYXRpb25Qcm9wcywgJ3R5cGUnPjtcbmV4cG9ydCBjb25zdCBBbGVydDogUmVhY3QuRkM8QWxlcnRQcm9wcz4gPSAocHJvcHMpID0+IChcbiAgPE5vdGlmaWNhdGlvbiB7Li4ucHJvcHN9IHR5cGU9J2FsZXJ0JyAvPlxuKTtcblxuZXhwb3J0IHR5cGUgVG9hc3RQcm9wcyA9IE9taXQ8Tm90aWZpY2F0aW9uUHJvcHMsICd0eXBlJz47XG5leHBvcnQgY29uc3QgVG9hc3Q6IFJlYWN0LkZDPFRvYXN0UHJvcHM+ID0gKHByb3BzKSA9PiAoXG4gIDxOb3RpZmljYXRpb24gey4uLnByb3BzfSB0eXBlPSd0b2FzdCcgLz5cbik7XG4iXX0=